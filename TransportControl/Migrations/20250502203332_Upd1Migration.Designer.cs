// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace TransportControl.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250502203332_Upd1Migration")]
    partial class Upd1Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TransportControl.Model.Entity.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("CarFuelUsing")
                        .HasColumnType("double precision");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CarVin")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndInsurance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartInsurance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.TrackList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CarId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OdometrEnd")
                        .HasColumnType("integer");

                    b.Property<int>("OdometrStart")
                        .HasColumnType("integer");

                    b.Property<double>("RemainingFuelEnd")
                        .HasColumnType("double precision");

                    b.Property<double>("RemainingFuelStart")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidityPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidityPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CarId1");

                    b.HasIndex("DriverId");

                    b.ToTable("TrackLists");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.TrackPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("text");

                    b.Property<int>("DistanceTraveled")
                        .HasColumnType("integer");

                    b.Property<string>("EndPointName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndPointTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumderPoint")
                        .HasColumnType("integer");

                    b.Property<string>("StartPointName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartPointTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TrackListId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TrackListId");

                    b.ToTable("TrackPoints");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.TrackList", b =>
                {
                    b.HasOne("TransportControl.Model.Entity.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportControl.Model.Entity.Car", null)
                        .WithMany("TrackLists")
                        .HasForeignKey("CarId1");

                    b.HasOne("TransportControl.Model.Entity.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.TrackPoint", b =>
                {
                    b.HasOne("TransportControl.Model.Entity.TrackList", "TrackList")
                        .WithMany("TrackPoints")
                        .HasForeignKey("TrackListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackList");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.Car", b =>
                {
                    b.Navigation("TrackLists");
                });

            modelBuilder.Entity("TransportControl.Model.Entity.TrackList", b =>
                {
                    b.Navigation("TrackPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
